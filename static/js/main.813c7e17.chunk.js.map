{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","firstNumber","lastNumber","oparator","oparatorClicked","result","onNumberChange","e","_this","inputValue","target","textContent","setState","makeResult","_this$state","parseFloat","_this2","this","react_default","a","createElement","class","id","type","onClick","Component","App","className","components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.813c7e17.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Calculator extends Component {\n  state = {\n    firstNumber: \"\",\n    lastNumber: \"\",\n    oparator: \"\",\n    oparatorClicked: false,\n    result: \"\"\n  };\n\n  onNumberChange = e => {\n    if (this.state.oparatorClicked !== true) {\n      const inputValue = e.target.textContent;\n      this.setState({\n        firstNumber: this.state.firstNumber + inputValue\n      });\n    } else {\n      const inputValue = e.target.textContent;\n      this.setState({ lastNumber: this.state.lastNumber + inputValue });\n    }\n  };\n\n  makeResult = () => {\n    const { oparator, firstNumber, lastNumber } = this.state;\n    if (oparator == \"+\") {\n      this.setState({\n        firstNumber: \"\",\n        lastNumber: \"\",\n        oparator: \"\",\n        oparatorClicked: \"\",\n        result: parseFloat(firstNumber) + parseFloat(lastNumber)\n      });\n    } else if (oparator == \"-\") {\n      this.setState({\n        firstNumber: \"\",\n        lastNumber: \"\",\n        oparator: \"\",\n        oparatorClicked: \"\",\n        result: parseFloat(firstNumber) - parseFloat(lastNumber)\n      });\n    } else if (oparator == \"/\") {\n      this.setState({\n        firstNumber: \"\",\n        lastNumber: \"\",\n        oparator: \"\",\n        oparatorClicked: \"\",\n        result: parseFloat(firstNumber) / parseFloat(lastNumber)\n      });\n    } else if (oparator == \"x\") {\n      this.setState({\n        firstNumber: \"\",\n        lastNumber: \"\",\n        oparator: \"\",\n        oparatorClicked: \"\",\n        result: parseFloat(firstNumber) * parseFloat(lastNumber)\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"container-fluid wrapper\">\n        <div class=\"container-fluid\" id=\"display\">\n          {this.state.firstNumber !== \"\" ? this.state.firstNumber : null}\n          {this.state.oparator !== \"\" ? this.state.oparator : null}\n          {this.state.lastNumber !== \"\" ? this.state.lastNumber : null}\n          {this.state.result !== \"\" ? this.state.result : null}\n        </div>\n        <div class=\"container-fluid button-view\">\n          <div class=\"container-fluid button-row\">\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-danger numbers btn-wide\"\n              id=\"clear\"\n              onClick={() =>\n                this.setState({\n                  firstNumber: \"\",\n                  lastNumber: \"\",\n                  oparator: \"\",\n                  oparatorClicked: false,\n                  result: \"\"\n                })\n              }\n            >\n              A/C\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-primary numbers\"\n              id=\"divide\"\n              onClick={e => {\n                this.setState({\n                  oparatorClicked: true,\n                  oparator: e.target.textContent\n                });\n              }}\n            >\n              /\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-primary numbers\"\n              id=\"multiply\"\n              onClick={e => {\n                this.setState({\n                  oparatorClicked: true,\n                  oparator: e.target.textContent\n                });\n              }}\n            >\n              x\n            </button>\n          </div>\n          <div class=\"container-fluid button-row\">\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-secondary numbers\"\n              id=\"seven\"\n              onClick={this.onNumberChange}\n            >\n              7\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-secondary numbers\"\n              id=\"eight\"\n              onClick={this.onNumberChange}\n            >\n              8\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-secondary numbers\"\n              id=\"nine\"\n              onClick={this.onNumberChange}\n            >\n              9\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-primary numbers\"\n              id=\"subtract\"\n              onClick={e => {\n                this.setState({\n                  oparatorClicked: true,\n                  oparator: e.target.textContent\n                });\n              }}\n            >\n              -\n            </button>\n          </div>\n          <div class=\"container-fluid button-row\">\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-secondary numbers\"\n              id=\"four\"\n              onClick={this.onNumberChange}\n            >\n              4\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-secondary numbers\"\n              id=\"five\"\n              onClick={this.onNumberChange}\n            >\n              5\n            </button>\n            <button\n              type=\"button\"\n              onClick={this.onNumberChange}\n              class=\"btn-xl btn-secondary numbers\"\n              id=\"six\"\n            >\n              6\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn-xl btn-primary numbers\"\n              id=\"add\"\n              onClick={e => {\n                this.setState({\n                  oparatorClicked: true,\n                  oparator: e.target.textContent\n                });\n              }}\n            >\n              +\n            </button>\n          </div>\n          <div class=\"container-fluid button-row\" id=\"last-row\">\n            <div id=\"button-column-left\" class=\"button-column\">\n              <button\n                type=\"button\"\n                class=\"btn-third btn-secondary numbers\"\n                id=\"one\"\n                onClick={this.onNumberChange}\n              >\n                1\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn-third btn-secondary numbers\"\n                id=\"two\"\n                onClick={this.onNumberChange}\n              >\n                2\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn-third btn-secondary numbers\"\n                id=\"three\"\n                onClick={this.onNumberChange}\n              >\n                3\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn-xl btn-secondary numbers btn-wide\"\n                id=\"zero\"\n                onClick={this.onNumberChange}\n              >\n                0\n              </button>\n              <button\n                type=\"button\"\n                class=\"btn-xl btn-secondary numbers\"\n                id=\"decimal\"\n              >\n                .\n              </button>\n            </div>\n            <div id=\"button-column-right\" class=\"button-column\">\n              <button\n                type=\"button\"\n                class=\"btn-warning numbers btn-tall\"\n                id=\"equals\"\n                onClick={this.makeResult}\n              >\n                =\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./components/Calculator\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}